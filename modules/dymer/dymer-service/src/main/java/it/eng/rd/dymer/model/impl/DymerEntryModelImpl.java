/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.rd.dymer.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import it.eng.rd.dymer.model.DymerEntry;
import it.eng.rd.dymer.model.DymerEntryModel;
import it.eng.rd.dymer.model.DymerEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DymerEntry service. Represents a row in the &quot;DYM_DymerEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DymerEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DymerEntryImpl}.
 * </p>
 *
 * @author ENGRD
 * @see DymerEntryImpl
 * @generated
 */
@JSON(strict = true)
public class DymerEntryModelImpl
	extends BaseModelImpl<DymerEntry> implements DymerEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dymer entry model instance should use the <code>DymerEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "DYM_DymerEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"entryId", Types.BIGINT}, {"index_", Types.VARCHAR},
		{"type_", Types.VARCHAR}, {"id_", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"extContent", Types.CLOB},
		{"url", Types.VARCHAR}, {"dymerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("index_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extContent", Types.CLOB);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dymerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DYM_DymerEntry (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,entryId LONG not null primary key,index_ VARCHAR(75) null,type_ VARCHAR(75) null,id_ VARCHAR(75) null,title VARCHAR(255) null,extContent TEXT null,url VARCHAR(75) null,dymerId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DYM_DymerEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dymerEntry.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DYM_DymerEntry.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long DYMERID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	public static final long INDEX_COLUMN_BITMASK = 16L;

	public static final long STATUS_COLUMN_BITMASK = 32L;

	public static final long TYPE_COLUMN_BITMASK = 64L;

	public static final long UUID_COLUMN_BITMASK = 128L;

	public static final long CREATEDATE_COLUMN_BITMASK = 256L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DymerEntry toModel(DymerEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DymerEntry model = new DymerEntryImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setEntryId(soapModel.getEntryId());
		model.setIndex(soapModel.getIndex());
		model.setType(soapModel.getType());
		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setExtContent(soapModel.getExtContent());
		model.setUrl(soapModel.getUrl());
		model.setDymerId(soapModel.getDymerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DymerEntry> toModels(DymerEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DymerEntry> models = new ArrayList<DymerEntry>(soapModels.length);

		for (DymerEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DymerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _entryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _entryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DymerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DymerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DymerEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DymerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DymerEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DymerEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DymerEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DymerEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DymerEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DymerEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DymerEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DymerEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DymerEntry.class.getClassLoader(), DymerEntry.class,
			ModelWrapper.class);

		try {
			Constructor<DymerEntry> constructor =
				(Constructor<DymerEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DymerEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DymerEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DymerEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DymerEntry, Object>>();
		Map<String, BiConsumer<DymerEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DymerEntry, ?>>();

		attributeGetterFunctions.put("mvccVersion", DymerEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<DymerEntry, Long>)DymerEntry::setMvccVersion);
		attributeGetterFunctions.put("uuid", DymerEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<DymerEntry, String>)DymerEntry::setUuid);
		attributeGetterFunctions.put("entryId", DymerEntry::getEntryId);
		attributeSetterBiConsumers.put(
			"entryId", (BiConsumer<DymerEntry, Long>)DymerEntry::setEntryId);
		attributeGetterFunctions.put("index", DymerEntry::getIndex);
		attributeSetterBiConsumers.put(
			"index", (BiConsumer<DymerEntry, String>)DymerEntry::setIndex);
		attributeGetterFunctions.put("type", DymerEntry::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<DymerEntry, String>)DymerEntry::setType);
		attributeGetterFunctions.put("id", DymerEntry::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<DymerEntry, String>)DymerEntry::setId);
		attributeGetterFunctions.put("title", DymerEntry::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<DymerEntry, String>)DymerEntry::setTitle);
		attributeGetterFunctions.put("extContent", DymerEntry::getExtContent);
		attributeSetterBiConsumers.put(
			"extContent",
			(BiConsumer<DymerEntry, String>)DymerEntry::setExtContent);
		attributeGetterFunctions.put("url", DymerEntry::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<DymerEntry, String>)DymerEntry::setUrl);
		attributeGetterFunctions.put("dymerId", DymerEntry::getDymerId);
		attributeSetterBiConsumers.put(
			"dymerId", (BiConsumer<DymerEntry, Long>)DymerEntry::setDymerId);
		attributeGetterFunctions.put("groupId", DymerEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<DymerEntry, Long>)DymerEntry::setGroupId);
		attributeGetterFunctions.put("companyId", DymerEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DymerEntry, Long>)DymerEntry::setCompanyId);
		attributeGetterFunctions.put("userId", DymerEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DymerEntry, Long>)DymerEntry::setUserId);
		attributeGetterFunctions.put("userName", DymerEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DymerEntry, String>)DymerEntry::setUserName);
		attributeGetterFunctions.put("createDate", DymerEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DymerEntry, Date>)DymerEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DymerEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DymerEntry, Date>)DymerEntry::setModifiedDate);
		attributeGetterFunctions.put("status", DymerEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<DymerEntry, Integer>)DymerEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DymerEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DymerEntry, Long>)DymerEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DymerEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DymerEntry, String>)DymerEntry::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", DymerEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DymerEntry, Date>)DymerEntry::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEntryId() {
		return _entryId;
	}

	@Override
	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	@JSON
	@Override
	public String getIndex() {
		if (_index == null) {
			return "";
		}
		else {
			return _index;
		}
	}

	@Override
	public void setIndex(String index) {
		_columnBitmask |= INDEX_COLUMN_BITMASK;

		if (_originalIndex == null) {
			_originalIndex = _index;
		}

		_index = index;
	}

	public String getOriginalIndex() {
		return GetterUtil.getString(_originalIndex);
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return "";
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (_originalId == null) {
			_originalId = _id;
		}

		_id = id;
	}

	public String getOriginalId() {
		return GetterUtil.getString(_originalId);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getExtContent() {
		if (_extContent == null) {
			return "";
		}
		else {
			return _extContent;
		}
	}

	@Override
	public void setExtContent(String extContent) {
		_extContent = extContent;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public long getDymerId() {
		return _dymerId;
	}

	@Override
	public void setDymerId(long dymerId) {
		_columnBitmask |= DYMERID_COLUMN_BITMASK;

		if (!_setOriginalDymerId) {
			_setOriginalDymerId = true;

			_originalDymerId = _dymerId;
		}

		_dymerId = dymerId;
	}

	public long getOriginalDymerId() {
		return _originalDymerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DymerEntry.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DymerEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DymerEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DymerEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DymerEntryImpl dymerEntryImpl = new DymerEntryImpl();

		dymerEntryImpl.setMvccVersion(getMvccVersion());
		dymerEntryImpl.setUuid(getUuid());
		dymerEntryImpl.setEntryId(getEntryId());
		dymerEntryImpl.setIndex(getIndex());
		dymerEntryImpl.setType(getType());
		dymerEntryImpl.setId(getId());
		dymerEntryImpl.setTitle(getTitle());
		dymerEntryImpl.setExtContent(getExtContent());
		dymerEntryImpl.setUrl(getUrl());
		dymerEntryImpl.setDymerId(getDymerId());
		dymerEntryImpl.setGroupId(getGroupId());
		dymerEntryImpl.setCompanyId(getCompanyId());
		dymerEntryImpl.setUserId(getUserId());
		dymerEntryImpl.setUserName(getUserName());
		dymerEntryImpl.setCreateDate(getCreateDate());
		dymerEntryImpl.setModifiedDate(getModifiedDate());
		dymerEntryImpl.setStatus(getStatus());
		dymerEntryImpl.setStatusByUserId(getStatusByUserId());
		dymerEntryImpl.setStatusByUserName(getStatusByUserName());
		dymerEntryImpl.setStatusDate(getStatusDate());

		dymerEntryImpl.resetOriginalValues();

		return dymerEntryImpl;
	}

	@Override
	public int compareTo(DymerEntry dymerEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), dymerEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DymerEntry)) {
			return false;
		}

		DymerEntry dymerEntry = (DymerEntry)object;

		long primaryKey = dymerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		DymerEntryModelImpl dymerEntryModelImpl = this;

		dymerEntryModelImpl._originalUuid = dymerEntryModelImpl._uuid;

		dymerEntryModelImpl._originalIndex = dymerEntryModelImpl._index;

		dymerEntryModelImpl._originalType = dymerEntryModelImpl._type;

		dymerEntryModelImpl._originalId = dymerEntryModelImpl._id;

		dymerEntryModelImpl._originalDymerId = dymerEntryModelImpl._dymerId;

		dymerEntryModelImpl._setOriginalDymerId = false;

		dymerEntryModelImpl._originalGroupId = dymerEntryModelImpl._groupId;

		dymerEntryModelImpl._setOriginalGroupId = false;

		dymerEntryModelImpl._originalCompanyId = dymerEntryModelImpl._companyId;

		dymerEntryModelImpl._setOriginalCompanyId = false;

		dymerEntryModelImpl._setModifiedDate = false;

		dymerEntryModelImpl._originalStatus = dymerEntryModelImpl._status;

		dymerEntryModelImpl._setOriginalStatus = false;

		dymerEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DymerEntry> toCacheModel() {
		DymerEntryCacheModel dymerEntryCacheModel = new DymerEntryCacheModel();

		dymerEntryCacheModel.mvccVersion = getMvccVersion();

		dymerEntryCacheModel.uuid = getUuid();

		String uuid = dymerEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dymerEntryCacheModel.uuid = null;
		}

		dymerEntryCacheModel.entryId = getEntryId();

		dymerEntryCacheModel.index = getIndex();

		String index = dymerEntryCacheModel.index;

		if ((index != null) && (index.length() == 0)) {
			dymerEntryCacheModel.index = null;
		}

		dymerEntryCacheModel.type = getType();

		String type = dymerEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dymerEntryCacheModel.type = null;
		}

		dymerEntryCacheModel.id = getId();

		String id = dymerEntryCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			dymerEntryCacheModel.id = null;
		}

		dymerEntryCacheModel.title = getTitle();

		String title = dymerEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			dymerEntryCacheModel.title = null;
		}

		dymerEntryCacheModel.extContent = getExtContent();

		String extContent = dymerEntryCacheModel.extContent;

		if ((extContent != null) && (extContent.length() == 0)) {
			dymerEntryCacheModel.extContent = null;
		}

		dymerEntryCacheModel.url = getUrl();

		String url = dymerEntryCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			dymerEntryCacheModel.url = null;
		}

		dymerEntryCacheModel.dymerId = getDymerId();

		dymerEntryCacheModel.groupId = getGroupId();

		dymerEntryCacheModel.companyId = getCompanyId();

		dymerEntryCacheModel.userId = getUserId();

		dymerEntryCacheModel.userName = getUserName();

		String userName = dymerEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dymerEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dymerEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			dymerEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dymerEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dymerEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dymerEntryCacheModel.status = getStatus();

		dymerEntryCacheModel.statusByUserId = getStatusByUserId();

		dymerEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dymerEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dymerEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dymerEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dymerEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return dymerEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DymerEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DymerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DymerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DymerEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DymerEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DymerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DymerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DymerEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DymerEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _entryId;
	private String _index;
	private String _originalIndex;
	private String _type;
	private String _originalType;
	private String _id;
	private String _originalId;
	private String _title;
	private String _extContent;
	private String _url;
	private long _dymerId;
	private long _originalDymerId;
	private boolean _setOriginalDymerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private DymerEntry _escapedModel;

}