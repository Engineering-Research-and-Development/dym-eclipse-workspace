/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.rd.sandbox.request.service.impl;

import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.jsonwebservice.JSONWebService;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.Team;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.security.access.control.AccessControlled;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextThreadLocal;
import com.liferay.portal.kernel.service.TeamLocalServiceUtil;
import com.liferay.portal.kernel.service.UserServiceUtil;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.osgi.service.component.annotations.Component;

import it.eng.rd.sandbox.request.service.base.SandboxServiceBaseImpl;
import com.liferay.portal.kernel.json.JSONObject;

import it.eng.rd.hubcap.sandbox.request.model.JSONResponse;
/**
 * The implementation of the sandbox remote service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the <code>it.eng.rd.sandbox.request.service.SandboxService</code> interface.
 *
 * <p>
 * This is a remote service. Methods of this service are expected to have security checks based on the propagated JAAS credentials because this service can be accessed remotely.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SandboxServiceBaseImpl
 */
@Component(
	property = {
		"json.web.service.context.name=sandbox",	
		"json.web.service.context.path=Sandbox"
	},
	service = AopService.class
)
public class SandboxServiceImpl extends SandboxServiceBaseImpl {
	
	private final static Log LOG = LogFactoryUtil.getLog(SandboxServiceImpl.class);
	
	@SuppressWarnings("null")
	@AccessControlled(guestAccessEnabled=true)
	@JSONWebService(value = "getSendName", method = "GET")
	public com.liferay.portal.kernel.json.JSONObject getSendName() throws PortalException, SystemException {
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("-----------------------------------------------------------------------------------------------------------------------");
			LOG.debug("getSendName method");
		}
		
		ServiceContext serviceContext = new ServiceContext();
		String ritorno = null;
		String status = null;
		JSONObject article;
		String message = null;
			
		long uid2 = ServiceContextThreadLocal.getServiceContext().getUserId();
		if (LOG.isDebugEnabled())
			LOG.debug("current user, uid2: "+uid2);
		long uid = serviceContext.getUserId();
		User uu = UserServiceUtil.getUserById(uid2);
		String screenname = uu.getScreenName();
		 
		JSONResponse jResponse = new JSONResponse();
			 
		List<Team> teams = TeamLocalServiceUtil.getUserTeams(uu.getUserId());	 
		if (LOG.isDebugEnabled())
			LOG.debug("teams of user: "+teams.toString());		 
					 
		JSONArray stateArray = JSONFactoryUtil.createJSONArray();	
			
		DefaultHttpClient client = new DefaultHttpClient();

		//String sandboxURL = "http://sboxmanager.local/sandboxfromportal/users/accessSandbox";
		/*test url*/
		String sandboxURL = "http://195.201.83.104/api/dservice/api/v1/import/accessSandbox";
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("screenname "+screenname);
			LOG.debug("sandboxURL "+sandboxURL);
		}
				 
		if( !(teams != null && teams.isEmpty() )){
					 
			/*POST*/
			HttpPost post = new HttpPost(sandboxURL);
			post.addHeader("Content-Type","application/json");
			String json = "{\"screenname\":\""+screenname+"\"}";
			
			/*GET check TODO*/
//			HttpGet get = new HttpGet(sandboxURL);	 
//			get.addHeader("Content-Type","application/json");
				 
			try {
				StringEntity se = new StringEntity(json);
				post.setEntity(se);
				
				HttpResponse  ServerResponse = client.execute(post);
				
				BufferedReader rd = new BufferedReader(new InputStreamReader(ServerResponse.getEntity().getContent()));
				StringBuffer result = new StringBuffer();
				String line = "";
				while ((line = rd.readLine()) != null) {
					result.append(line);
				}
				LOG.info("POST Response: " + result.toString());
				status = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("status");
				message = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("message");
				
				article = JSONFactoryUtil.createJSONObject();
				article.put("status", status);
				article.put("message", message);
				
				stateArray.put(article);
				
				if (LOG.isDebugEnabled()) {
					LOG.debug("status: " + status);
					LOG.debug("message: " + message);
				}

				if (status.equals("SUCCESS")) {
					jResponse.setSuccess(true);
					jResponse.setData(stateArray);
					if (LOG.isDebugEnabled()) {
						LOG.debug("status success IN ");
						LOG.debug("stateArray "+stateArray.toString());
					}
			    }else{
			    	if (LOG.isDebugEnabled())
						LOG.debug("status success OUT ");
					jResponse.setSuccess(false);
					jResponse.setData(stateArray);
			    }
			 	ritorno = "{\"status\":\""+status+"\\,\"message\":\""+message+"\"}"; 	
					 
			} catch (Exception e) {
				LOG.error("An error occurred in getSendName method, POST screenname");
				LOG.error(e.getMessage(), e);
				stateArray.put("An error occurred in getSendName method, POST screenname");
				jResponse.setSuccess(false);
				jResponse.setData(stateArray);
			}
		} else {
			article = JSONFactoryUtil.createJSONObject();
			article.put("status", "false");
			article.put("message", "You don't have permission to access the sandbox. Please contact the administrator");
			stateArray.put(article);
			jResponse.setSuccess(false);
			jResponse.setData(stateArray);
		}
		return jResponse.toJSONObject();
	 }

	
	@SuppressWarnings("null")
	@AccessControlled(guestAccessEnabled=true)
	@JSONWebService(value = "getSendModel", method = "GET")
	public JSONObject getSendModel(String m_id, String t_id) throws PortalException, SystemException {
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("-----------------------------------------------------------------------------------------------------------------------");
			LOG.debug("getSendModel method");
		}
			
		ServiceContext serviceContext = new ServiceContext();
		String ritorno = null;
		String status = null;
		JSONObject article;
		String message = null;
			
		long uid2 = ServiceContextThreadLocal.getServiceContext().getUserId();
		if (LOG.isDebugEnabled())
			LOG.debug("current user, uid2: "+uid2);
		long uid = serviceContext.getUserId();
		 
		User uu = UserServiceUtil.getUserById(uid2);
		String screenname = uu.getScreenName();
		 
		JSONResponse jResponse = new JSONResponse();
		 
		List<Team> tt= TeamLocalServiceUtil.getUserTeams(uu.getUserId());
		if (LOG.isDebugEnabled()) {
			LOG.debug("teams of user: "+tt.toString());		 
			LOG.debug("model_id: "+m_id.toString());	
			LOG.debug("tool_id: "+t_id.toString());
		}
		
		JSONArray stateArray = JSONFactoryUtil.createJSONArray();	
			
		DefaultHttpClient client = new DefaultHttpClient();
		
//		String  sandboxURL =  "http://sboxmanager.local/sandboxfromportal/cart/populateSandboxCart";
		String  sandboxURL =  "http://195.201.83.104/api/dservice/api/v1/import/populateSandboxCart";
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("screenname: "+screenname);
			LOG.debug("sandboxURL: "+sandboxURL);
		}
				 
		if( !(tt != null && tt.isEmpty() )) 
		{
			
			if(!(m_id.isEmpty()) && !(t_id.isEmpty())) 
			{	
				/*POST*/
				HttpPost post = new HttpPost(sandboxURL);
				post.addHeader("Content-Type","application/json");
				String json = "{\"screen_name\":\""+screenname+"\",\"model_id\":\""+m_id+"\",\"tool_id\":\""+t_id+"\"}";
				
				/*GET TODO check*/
//				HttpGet get = new HttpGet(posturl);	 
//				get.addHeader("Content-Type","application/json");
	 
				try {
					StringEntity se= new StringEntity(json);
					post.setEntity(se);
					
					HttpResponse  ServerResponse = client.execute(post);
	
					BufferedReader rd = new BufferedReader(new InputStreamReader(ServerResponse.getEntity().getContent()));
					StringBuffer result = new StringBuffer();
					String line = "";
					while ((line = rd.readLine()) != null) {
						result.append(line);
					}
	
					if (LOG.isDebugEnabled())
						LOG.debug("Response: " + result.toString());
					
					status = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("status");
					message = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("message");
	
					article = JSONFactoryUtil.createJSONObject();
					article.put("status", status);
					article.put("message", message);
					stateArray.put(article);
	
					if (LOG.isDebugEnabled()) {
						LOG.debug("status: " + status);
						LOG.debug("message: " + message);
					}
	
					if (status.equals("SUCCESS")) 
					{
						if (LOG.isDebugEnabled()) {
							LOG.debug("status success IN");
							LOG.debug("stateArray: "+stateArray.toString());
						}
						jResponse.setSuccess(true);
						jResponse.setData(stateArray);
						
					} else {
						if (LOG.isDebugEnabled())
							LOG.debug("status success OUT");
						jResponse.setSuccess(false);
						jResponse.setData(stateArray);
					}
					ritorno = "{\"status\":\""+status+"\\,\"message\":\""+message+"\"}"; 	
	 
				} catch (Exception e) {
					LOG.error("An error occurred in getSendName method, POST screenname, model_id, tool_id");
					LOG.error(e.getMessage(), e);
					stateArray.put("An error occurred in getSendName method, POST screenname, model_id, tool_id");
					jResponse.setSuccess(false);
					jResponse.setData(stateArray);
				}
 
			} else {
				article = JSONFactoryUtil.createJSONObject();
				article.put("status", "false");
				article.put("message", "Please check Model Id and Tool Id. Contact the administrator");
				stateArray.put(article);
				jResponse.setSuccess(false);
				jResponse.setData(stateArray);
			}
		 
		} else {
			article = JSONFactoryUtil.createJSONObject();
			article.put("status", "false");
			article.put("message", "You don't have permission to access the sandbox. Please contact the administrator");
			stateArray.put(article);
			jResponse.setSuccess(false);
			jResponse.setData(stateArray);
		}
		return jResponse.toJSONObject();
	} 

	@SuppressWarnings("null")
	@AccessControlled(guestAccessEnabled=true)
	@JSONWebService(value = "getSendTool", method = "GET")
	public JSONObject getSendTool(String t_id) throws PortalException, SystemException {
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("-----------------------------------------------------------------------------------------------------------------------");
			LOG.debug("getSendTool method");
		}
		
		ServiceContext serviceContext = new ServiceContext();
		String ritorno=null;
		String status = null;
		JSONObject article;
		String message = null;
			
		long uid2 = ServiceContextThreadLocal.getServiceContext().getUserId();
		if (LOG.isDebugEnabled())
			LOG.debug("current user, uid2: "+uid2);
		long uid= serviceContext.getUserId();
			 
		User uu = UserServiceUtil.getUserById(uid2);
		 
		String screenname = uu.getScreenName();
		 
		JSONResponse jResponse = new JSONResponse();
		 
		List<Team> tt = TeamLocalServiceUtil.getUserTeams(uu.getUserId());	 
		if (LOG.isDebugEnabled()) {
			LOG.debug("teams of user: "+tt.toString());
			LOG.debug("tool_id "+t_id.toString());
		}
			
		JSONArray stateArray = JSONFactoryUtil.createJSONArray();	
		DefaultHttpClient client = new DefaultHttpClient();
		
//		String sandboxURL = "http://sboxmanager.local/sandboxfromportal/cart/populateSandboxCart";
		String  sandboxURL =  "http://195.201.83.104/api/dservice/api/v1/import/populateSandboxCart";
		
		if (LOG.isDebugEnabled()) {
			LOG.debug("screenname: "+screenname);
			LOG.debug("sandboxURL: "+sandboxURL);
		}
				 
		if( !(tt != null && tt.isEmpty())) {
				   
			if(!(t_id.isEmpty())) {	
					 
				HttpPost post = new HttpPost(sandboxURL);
				post.addHeader("Content-Type","application/json");
				String json = "{\"screen_name\":\""+screenname+"\",\"tool_id\":\""+t_id+"\"}";
				  /*GET*/
//					 HttpGet get= new HttpGet(posturl);	 
//					 get.addHeader("Content-Type","application/json");
					 
				try {
					StringEntity se= new StringEntity(json);
					post.setEntity(se);
					HttpResponse  ServerResponse = client.execute(post);
					BufferedReader rd = new BufferedReader(new InputStreamReader(ServerResponse.getEntity().getContent()));
					StringBuffer result = new StringBuffer();
					String line = "";
					while ((line = rd.readLine()) != null) {
						result.append(line);
					}
					if (LOG.isDebugEnabled())
						LOG.debug("Response: " + result.toString());
					status = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("status");
					message = (new JSONFactoryUtil().createJSONObject(result.toString())).getString("message");
					article = JSONFactoryUtil.createJSONObject();
					article.put("status", status);
					article.put("message", message);
					stateArray.put(article);
					if (LOG.isDebugEnabled()) {
						LOG.debug("status: " + status);
						LOG.debug("message: " + message);
					}

					if (status.equals("SUCCESS")) {
						if (LOG.isDebugEnabled()) {
							LOG.debug("status success IN");
							LOG.debug("stateArray: "+stateArray.toString());
						}
						jResponse.setSuccess(true);
						jResponse.setData(stateArray);
						 
					}else{
						if (LOG.isDebugEnabled())
							LOG.debug("status success OUT");
						jResponse.setSuccess(false);
						jResponse.setData(stateArray);
					}
					ritorno = "{\"status\":\""+status+"\\,\"message\":\""+message+"\"}"; 	
					 
				} catch (Exception e) {
					LOG.error("An error occurred in getSendTool method, POST screenname, tool_id");
					LOG.error(e.getMessage(), e);
					stateArray.put("An error occurred in getSendTool method, POST screenname, tool_id");
					jResponse.setSuccess(false);
			    	jResponse.setData(stateArray);
				}

			} else {
				article = JSONFactoryUtil.createJSONObject();
				article.put("status", "false");
				article.put("message","Please check Model Id and Tool Id. Contact the administrator");
				stateArray.put(article);
				jResponse.setSuccess(false);
				jResponse.setData(stateArray);
			}
		} else {
			article = JSONFactoryUtil.createJSONObject();
			article.put("status", "false");
			article.put("message", "You don't have permission to access the sandbox. Please contact the administrator");
			stateArray.put(article);
			jResponse.setSuccess(false);
			jResponse.setData(stateArray);
		}
	    return jResponse.toJSONObject();
	}
}