/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.rd.collaborativecreation.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import it.eng.rd.collaborativecreation.model.Challenge;
import it.eng.rd.collaborativecreation.model.ChallengeModel;
import it.eng.rd.collaborativecreation.model.ChallengeSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Challenge service. Represents a row in the &quot;COCREATION_Challenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ChallengeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChallengeImpl}.
 * </p>
 *
 * @author ENGRD
 * @see ChallengeImpl
 * @generated
 */
@JSON(strict = true)
public class ChallengeModelImpl
	extends BaseModelImpl<Challenge> implements ChallengeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a challenge model instance should use the <code>Challenge</code> interface instead.
	 */
	public static final String TABLE_NAME = "COCREATION_Challenge";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"challengeId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"title", Types.CLOB},
		{"description", Types.CLOB}, {"desiredOutcome", Types.CLOB},
		{"additionalInformation", Types.CLOB}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"dlFolderName", Types.VARCHAR},
		{"dlFolderId", Types.BIGINT}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("challengeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.CLOB);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("desiredOutcome", Types.CLOB);
		TABLE_COLUMNS_MAP.put("additionalInformation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dlFolderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dlFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table COCREATION_Challenge (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,challengeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title TEXT null,description TEXT null,desiredOutcome TEXT null,additionalInformation TEXT null,startDate DATE null,endDate DATE null,dlFolderName VARCHAR(75) null,dlFolderId LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,active_ BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table COCREATION_Challenge";

	public static final String ORDER_BY_JPQL =
		" ORDER BY challenge.createDate DESC, challenge.startDate DESC, challenge.endDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY COCREATION_Challenge.createDate DESC, COCREATION_Challenge.startDate DESC, COCREATION_Challenge.endDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STARTDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENDDATE_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Challenge toModel(ChallengeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Challenge model = new ChallengeImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setChallengeId(soapModel.getChallengeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setDesiredOutcome(soapModel.getDesiredOutcome());
		model.setAdditionalInformation(soapModel.getAdditionalInformation());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDlFolderName(soapModel.getDlFolderName());
		model.setDlFolderId(soapModel.getDlFolderId());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setActive(soapModel.isActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Challenge> toModels(ChallengeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Challenge> models = new ArrayList<Challenge>(soapModels.length);

		for (ChallengeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ChallengeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _challengeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChallengeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _challengeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Challenge.class;
	}

	@Override
	public String getModelClassName() {
		return Challenge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Challenge, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Challenge, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Challenge, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Challenge)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Challenge, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Challenge, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Challenge)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Challenge, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Challenge, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Challenge>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Challenge.class.getClassLoader(), Challenge.class,
			ModelWrapper.class);

		try {
			Constructor<Challenge> constructor =
				(Constructor<Challenge>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Challenge, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Challenge, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Challenge, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Challenge, Object>>();
		Map<String, BiConsumer<Challenge, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Challenge, ?>>();

		attributeGetterFunctions.put("mvccVersion", Challenge::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<Challenge, Long>)Challenge::setMvccVersion);
		attributeGetterFunctions.put("uuid", Challenge::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Challenge, String>)Challenge::setUuid);
		attributeGetterFunctions.put("challengeId", Challenge::getChallengeId);
		attributeSetterBiConsumers.put(
			"challengeId",
			(BiConsumer<Challenge, Long>)Challenge::setChallengeId);
		attributeGetterFunctions.put("groupId", Challenge::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Challenge, Long>)Challenge::setGroupId);
		attributeGetterFunctions.put("companyId", Challenge::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Challenge, Long>)Challenge::setCompanyId);
		attributeGetterFunctions.put("userId", Challenge::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Challenge, Long>)Challenge::setUserId);
		attributeGetterFunctions.put("userName", Challenge::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Challenge, String>)Challenge::setUserName);
		attributeGetterFunctions.put("createDate", Challenge::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Challenge, Date>)Challenge::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Challenge::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Challenge, Date>)Challenge::setModifiedDate);
		attributeGetterFunctions.put("title", Challenge::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Challenge, String>)Challenge::setTitle);
		attributeGetterFunctions.put("description", Challenge::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Challenge, String>)Challenge::setDescription);
		attributeGetterFunctions.put(
			"desiredOutcome", Challenge::getDesiredOutcome);
		attributeSetterBiConsumers.put(
			"desiredOutcome",
			(BiConsumer<Challenge, String>)Challenge::setDesiredOutcome);
		attributeGetterFunctions.put(
			"additionalInformation", Challenge::getAdditionalInformation);
		attributeSetterBiConsumers.put(
			"additionalInformation",
			(BiConsumer<Challenge, String>)Challenge::setAdditionalInformation);
		attributeGetterFunctions.put("startDate", Challenge::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate", (BiConsumer<Challenge, Date>)Challenge::setStartDate);
		attributeGetterFunctions.put("endDate", Challenge::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate", (BiConsumer<Challenge, Date>)Challenge::setEndDate);
		attributeGetterFunctions.put(
			"dlFolderName", Challenge::getDlFolderName);
		attributeSetterBiConsumers.put(
			"dlFolderName",
			(BiConsumer<Challenge, String>)Challenge::setDlFolderName);
		attributeGetterFunctions.put("dlFolderId", Challenge::getDlFolderId);
		attributeSetterBiConsumers.put(
			"dlFolderId",
			(BiConsumer<Challenge, Long>)Challenge::setDlFolderId);
		attributeGetterFunctions.put("status", Challenge::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Challenge, Integer>)Challenge::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Challenge::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Challenge, Long>)Challenge::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Challenge::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Challenge, String>)Challenge::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Challenge::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<Challenge, Date>)Challenge::setStatusDate);
		attributeGetterFunctions.put("active", Challenge::getActive);
		attributeSetterBiConsumers.put(
			"active", (BiConsumer<Challenge, Boolean>)Challenge::setActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getChallengeId() {
		return _challengeId;
	}

	@Override
	public void setChallengeId(long challengeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_challengeId = challengeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTitle() {
		return getColumnOriginalValue("title");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getDesiredOutcome() {
		if (_desiredOutcome == null) {
			return "";
		}
		else {
			return _desiredOutcome;
		}
	}

	@Override
	public void setDesiredOutcome(String desiredOutcome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_desiredOutcome = desiredOutcome;
	}

	@JSON
	@Override
	public String getAdditionalInformation() {
		if (_additionalInformation == null) {
			return "";
		}
		else {
			return _additionalInformation;
		}
	}

	@Override
	public void setAdditionalInformation(String additionalInformation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalInformation = additionalInformation;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getDlFolderName() {
		if (_dlFolderName == null) {
			return "";
		}
		else {
			return _dlFolderName;
		}
	}

	@Override
	public void setDlFolderName(String dlFolderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlFolderName = dlFolderName;
	}

	@JSON
	@Override
	public long getDlFolderId() {
		return _dlFolderId;
	}

	@Override
	public void setDlFolderId(long dlFolderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dlFolderId = dlFolderId;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("active_"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Challenge.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Challenge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Challenge toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Challenge>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChallengeImpl challengeImpl = new ChallengeImpl();

		challengeImpl.setMvccVersion(getMvccVersion());
		challengeImpl.setUuid(getUuid());
		challengeImpl.setChallengeId(getChallengeId());
		challengeImpl.setGroupId(getGroupId());
		challengeImpl.setCompanyId(getCompanyId());
		challengeImpl.setUserId(getUserId());
		challengeImpl.setUserName(getUserName());
		challengeImpl.setCreateDate(getCreateDate());
		challengeImpl.setModifiedDate(getModifiedDate());
		challengeImpl.setTitle(getTitle());
		challengeImpl.setDescription(getDescription());
		challengeImpl.setDesiredOutcome(getDesiredOutcome());
		challengeImpl.setAdditionalInformation(getAdditionalInformation());
		challengeImpl.setStartDate(getStartDate());
		challengeImpl.setEndDate(getEndDate());
		challengeImpl.setDlFolderName(getDlFolderName());
		challengeImpl.setDlFolderId(getDlFolderId());
		challengeImpl.setStatus(getStatus());
		challengeImpl.setStatusByUserId(getStatusByUserId());
		challengeImpl.setStatusByUserName(getStatusByUserName());
		challengeImpl.setStatusDate(getStatusDate());
		challengeImpl.setActive(isActive());

		challengeImpl.resetOriginalValues();

		return challengeImpl;
	}

	@Override
	public int compareTo(Challenge challenge) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), challenge.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getStartDate(), challenge.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getEndDate(), challenge.getEndDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Challenge)) {
			return false;
		}

		Challenge challenge = (Challenge)object;

		long primaryKey = challenge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Challenge> toCacheModel() {
		ChallengeCacheModel challengeCacheModel = new ChallengeCacheModel();

		challengeCacheModel.mvccVersion = getMvccVersion();

		challengeCacheModel.uuid = getUuid();

		String uuid = challengeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			challengeCacheModel.uuid = null;
		}

		challengeCacheModel.challengeId = getChallengeId();

		challengeCacheModel.groupId = getGroupId();

		challengeCacheModel.companyId = getCompanyId();

		challengeCacheModel.userId = getUserId();

		challengeCacheModel.userName = getUserName();

		String userName = challengeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			challengeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			challengeCacheModel.createDate = createDate.getTime();
		}
		else {
			challengeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			challengeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			challengeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		challengeCacheModel.title = getTitle();

		String title = challengeCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			challengeCacheModel.title = null;
		}

		challengeCacheModel.description = getDescription();

		String description = challengeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			challengeCacheModel.description = null;
		}

		challengeCacheModel.desiredOutcome = getDesiredOutcome();

		String desiredOutcome = challengeCacheModel.desiredOutcome;

		if ((desiredOutcome != null) && (desiredOutcome.length() == 0)) {
			challengeCacheModel.desiredOutcome = null;
		}

		challengeCacheModel.additionalInformation = getAdditionalInformation();

		String additionalInformation =
			challengeCacheModel.additionalInformation;

		if ((additionalInformation != null) &&
			(additionalInformation.length() == 0)) {

			challengeCacheModel.additionalInformation = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			challengeCacheModel.startDate = startDate.getTime();
		}
		else {
			challengeCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			challengeCacheModel.endDate = endDate.getTime();
		}
		else {
			challengeCacheModel.endDate = Long.MIN_VALUE;
		}

		challengeCacheModel.dlFolderName = getDlFolderName();

		String dlFolderName = challengeCacheModel.dlFolderName;

		if ((dlFolderName != null) && (dlFolderName.length() == 0)) {
			challengeCacheModel.dlFolderName = null;
		}

		challengeCacheModel.dlFolderId = getDlFolderId();

		challengeCacheModel.status = getStatus();

		challengeCacheModel.statusByUserId = getStatusByUserId();

		challengeCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = challengeCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			challengeCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			challengeCacheModel.statusDate = statusDate.getTime();
		}
		else {
			challengeCacheModel.statusDate = Long.MIN_VALUE;
		}

		challengeCacheModel.active = isActive();

		return challengeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Challenge, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Challenge, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Challenge, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Challenge)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Challenge, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Challenge, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Challenge, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Challenge)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Challenge>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _mvccVersion;
	private String _uuid;
	private long _challengeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _description;
	private String _desiredOutcome;
	private String _additionalInformation;
	private Date _startDate;
	private Date _endDate;
	private String _dlFolderName;
	private long _dlFolderId;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private boolean _active;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Challenge, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Challenge)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("challengeId", _challengeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("desiredOutcome", _desiredOutcome);
		_columnOriginalValues.put(
			"additionalInformation", _additionalInformation);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("dlFolderName", _dlFolderName);
		_columnOriginalValues.put("dlFolderId", _dlFolderId);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("active_", _active);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("challengeId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("title", 512L);

		columnBitmasks.put("description", 1024L);

		columnBitmasks.put("desiredOutcome", 2048L);

		columnBitmasks.put("additionalInformation", 4096L);

		columnBitmasks.put("startDate", 8192L);

		columnBitmasks.put("endDate", 16384L);

		columnBitmasks.put("dlFolderName", 32768L);

		columnBitmasks.put("dlFolderId", 65536L);

		columnBitmasks.put("status", 131072L);

		columnBitmasks.put("statusByUserId", 262144L);

		columnBitmasks.put("statusByUserName", 524288L);

		columnBitmasks.put("statusDate", 1048576L);

		columnBitmasks.put("active_", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Challenge _escapedModel;

}