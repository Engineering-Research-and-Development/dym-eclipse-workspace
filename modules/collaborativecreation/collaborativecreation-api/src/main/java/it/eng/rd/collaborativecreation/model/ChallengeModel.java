/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.eng.rd.collaborativecreation.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.MVCCModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Challenge service. Represents a row in the &quot;COCREATION_Challenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>it.eng.rd.collaborativecreation.model.impl.ChallengeModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>it.eng.rd.collaborativecreation.model.impl.ChallengeImpl</code>.
 * </p>
 *
 * @author ENGRD
 * @see Challenge
 * @generated
 */
@ProviderType
public interface ChallengeModel
	extends BaseModel<Challenge>, GroupedModel, MVCCModel, ShardedModel,
			StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a challenge model instance should use the {@link Challenge} interface instead.
	 */

	/**
	 * Returns the primary key of this challenge.
	 *
	 * @return the primary key of this challenge
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this challenge.
	 *
	 * @param primaryKey the primary key of this challenge
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the mvcc version of this challenge.
	 *
	 * @return the mvcc version of this challenge
	 */
	@Override
	public long getMvccVersion();

	/**
	 * Sets the mvcc version of this challenge.
	 *
	 * @param mvccVersion the mvcc version of this challenge
	 */
	@Override
	public void setMvccVersion(long mvccVersion);

	/**
	 * Returns the uuid of this challenge.
	 *
	 * @return the uuid of this challenge
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this challenge.
	 *
	 * @param uuid the uuid of this challenge
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the challenge ID of this challenge.
	 *
	 * @return the challenge ID of this challenge
	 */
	public long getChallengeId();

	/**
	 * Sets the challenge ID of this challenge.
	 *
	 * @param challengeId the challenge ID of this challenge
	 */
	public void setChallengeId(long challengeId);

	/**
	 * Returns the group ID of this challenge.
	 *
	 * @return the group ID of this challenge
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this challenge.
	 *
	 * @param groupId the group ID of this challenge
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this challenge.
	 *
	 * @return the company ID of this challenge
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this challenge.
	 *
	 * @param companyId the company ID of this challenge
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this challenge.
	 *
	 * @return the user ID of this challenge
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this challenge.
	 *
	 * @param userId the user ID of this challenge
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this challenge.
	 *
	 * @return the user uuid of this challenge
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this challenge.
	 *
	 * @param userUuid the user uuid of this challenge
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this challenge.
	 *
	 * @return the user name of this challenge
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this challenge.
	 *
	 * @param userName the user name of this challenge
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this challenge.
	 *
	 * @return the create date of this challenge
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this challenge.
	 *
	 * @param createDate the create date of this challenge
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this challenge.
	 *
	 * @return the modified date of this challenge
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this challenge.
	 *
	 * @param modifiedDate the modified date of this challenge
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the title of this challenge.
	 *
	 * @return the title of this challenge
	 */
	@AutoEscape
	public String getTitle();

	/**
	 * Sets the title of this challenge.
	 *
	 * @param title the title of this challenge
	 */
	public void setTitle(String title);

	/**
	 * Returns the description of this challenge.
	 *
	 * @return the description of this challenge
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this challenge.
	 *
	 * @param description the description of this challenge
	 */
	public void setDescription(String description);

	/**
	 * Returns the desired outcome of this challenge.
	 *
	 * @return the desired outcome of this challenge
	 */
	@AutoEscape
	public String getDesiredOutcome();

	/**
	 * Sets the desired outcome of this challenge.
	 *
	 * @param desiredOutcome the desired outcome of this challenge
	 */
	public void setDesiredOutcome(String desiredOutcome);

	/**
	 * Returns the start date of this challenge.
	 *
	 * @return the start date of this challenge
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this challenge.
	 *
	 * @param startDate the start date of this challenge
	 */
	public void setStartDate(Date startDate);

	/**
	 * Returns the end date of this challenge.
	 *
	 * @return the end date of this challenge
	 */
	public Date getEndDate();

	/**
	 * Sets the end date of this challenge.
	 *
	 * @param endDate the end date of this challenge
	 */
	public void setEndDate(Date endDate);

	/**
	 * Returns the dl folder name of this challenge.
	 *
	 * @return the dl folder name of this challenge
	 */
	@AutoEscape
	public String getDlFolderName();

	/**
	 * Sets the dl folder name of this challenge.
	 *
	 * @param dlFolderName the dl folder name of this challenge
	 */
	public void setDlFolderName(String dlFolderName);

	/**
	 * Returns the dl folder ID of this challenge.
	 *
	 * @return the dl folder ID of this challenge
	 */
	public long getDlFolderId();

	/**
	 * Sets the dl folder ID of this challenge.
	 *
	 * @param dlFolderId the dl folder ID of this challenge
	 */
	public void setDlFolderId(long dlFolderId);

	/**
	 * Returns the status of this challenge.
	 *
	 * @return the status of this challenge
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this challenge.
	 *
	 * @param status the status of this challenge
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this challenge.
	 *
	 * @return the status by user ID of this challenge
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this challenge.
	 *
	 * @param statusByUserId the status by user ID of this challenge
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this challenge.
	 *
	 * @return the status by user uuid of this challenge
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this challenge.
	 *
	 * @param statusByUserUuid the status by user uuid of this challenge
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this challenge.
	 *
	 * @return the status by user name of this challenge
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this challenge.
	 *
	 * @param statusByUserName the status by user name of this challenge
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this challenge.
	 *
	 * @return the status date of this challenge
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this challenge.
	 *
	 * @param statusDate the status date of this challenge
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the active of this challenge.
	 *
	 * @return the active of this challenge
	 */
	public boolean getActive();

	/**
	 * Returns <code>true</code> if this challenge is active.
	 *
	 * @return <code>true</code> if this challenge is active; <code>false</code> otherwise
	 */
	public boolean isActive();

	/**
	 * Sets whether this challenge is active.
	 *
	 * @param active the active of this challenge
	 */
	public void setActive(boolean active);

	/**
	 * Returns <code>true</code> if this challenge is approved.
	 *
	 * @return <code>true</code> if this challenge is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this challenge is denied.
	 *
	 * @return <code>true</code> if this challenge is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this challenge is a draft.
	 *
	 * @return <code>true</code> if this challenge is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this challenge is expired.
	 *
	 * @return <code>true</code> if this challenge is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this challenge is inactive.
	 *
	 * @return <code>true</code> if this challenge is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this challenge is incomplete.
	 *
	 * @return <code>true</code> if this challenge is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this challenge is pending.
	 *
	 * @return <code>true</code> if this challenge is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this challenge is scheduled.
	 *
	 * @return <code>true</code> if this challenge is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

}